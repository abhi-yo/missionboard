// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Added for local shadow DB
}

model Organization {
  id        String   @id @default(cuid())
  name      String?
  adminId   String   @unique // The User who is the admin of this organization
  admin     User     @relation("AdminToOrganization", fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members            Member[]
  events             Event[]
  membershipPlans    MembershipPlan[]
  payments           Payment[]
  subscriptions      Subscription[]
  images             Image[]
  eventRegistrations EventRegistration[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // Email should be unique for platform users (admins)
  emailVerified DateTime?
  image         String? // Avatar for the admin

  // Add this field for profile image relation
  profileImageId String? @unique
  profileImage   Image?  @relation("UserProfileImage", fields: [profileImageId], references: [id])

  phoneNumber String?
  status      MemberStatus @default(active) // Status of the admin user

  // Link to the Organization this User administers
  organization Organization? @relation("AdminToOrganization") // This is the inverse side of the one-to-one with Organization.admin

  joinDate    DateTime? @default(now())
  lastPayment DateTime? // This might relate to platform subscription, not org payments
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  createdEvents          Event[]          @relation("AdminCreatedEvents")
  createdMembershipPlans MembershipPlan[] @relation("AdminCreatedPlans")
  initiatedPayments      Payment[]        @relation("AdminInitiatedPayments")
  managedSubscriptions   Subscription[]   @relation("AdminManagedSubscriptions")
  uploadedImages         Image[]          @relation("AdminUploadedImagesForProfile")
}

// NextAuth specific models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enum for User/Member status
enum MemberStatus {
  active
  pending
  inactive
  cancelled
}

// Removed MemberRole enum as it's not needed with the new structure

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
  TRIALING
}

// Member model (data records, not login-enabled users)
model Member {
  id          String       @id @default(cuid())
  name        String
  email       String? // Optional, for record-keeping
  phoneNumber String?
  status      MemberStatus @default(active)
  joinDate    DateTime?    @default(now())
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  organizationId String // This should eventually be non-nullable after data migration
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // If members have profile images, distinct from User (admin) profile image
  // profileImage      Image?              @relation("MemberProfileImage", fields: [profileImageId], references: [id])
  // profileImageId    String?             @unique

  // Subscriptions this member has
  subscriptions Subscription[] @relation

  // Add payments relationship
  payments Payment[]

  // eventRegistrations EventRegistration[] @relation("MemberEventRegistrations") // Registrations by this member data
}

model MembershipPlan {
  id            String          @id @default(cuid())
  name          String
  description   String?
  price         Decimal
  currency      String          @default("USD")
  interval      BillingInterval
  active        Boolean         @default(true)
  stripePriceId String?         @unique
  features      String[]

  createdById String? // ID of the admin User who created this plan
  createdBy   User?   @relation("AdminCreatedPlans", fields: [createdById], references: [id], onDelete: SetNull)

  organizationId String? // Temporarily optional
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([organizationId])
}

enum PaymentStatus {
  COMPLETED
  PENDING
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  OTHER
}

model Payment {
  id          String        @id @default(cuid())
  amount      Decimal
  currency    String        @default("USD")
  status      PaymentStatus @default(COMPLETED)
  method      PaymentMethod @default(OTHER)
  description String?

  initiatedById String?
  initiatedBy   User?   @relation("AdminInitiatedPayments", fields: [initiatedById], references: [id], onDelete: SetNull)

  organizationId String? // Temporarily optional
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  // Add direct member relationship
  memberId String?
  member   Member? @relation(fields: [memberId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([memberId])
}

model Subscription {
  id String @id @default(cuid())

  managedById String?
  managedBy   User?   @relation("AdminManagedSubscriptions", fields: [managedById], references: [id], onDelete: SetNull)

  plan   MembershipPlan @relation(fields: [planId], references: [id])
  planId String

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Link to the specific member this subscription is for
  memberId String? // Foreign key to the Member
  member   Member? @relation(fields: [memberId], references: [id], onDelete: SetNull)

  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus

  startDate          DateTime @default(now())
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime

  cancelAtPeriodEnd Boolean   @default(false)
  canceledAt        DateTime?

  trialStartDate DateTime?
  trialEndDate   DateTime?

  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([memberId]) // Added index for memberId
}

// Event Management Models

// Enum for Event Status
enum EventStatus {
  SCHEDULED // Event is planned and open for registration or viewing
  CANCELED // Event has been canceled
  COMPLETED // Event has finished
  DRAFT // Event is being planned, not yet visible to public/members
  ARCHIVED // Event is completed and archived, not prominent in lists
}

// Enum for Registration Status
enum RegistrationStatus {
  CONFIRMED // User is confirmed for the event
  WAITLISTED // User is on the waitlist (if event has capacity and is full)
  CANCELED_BY_USER // User canceled their registration
  CANCELED_BY_ADMIN // Admin canceled the user's registration
  ATTENDED // User attended the event (marked post-event)
  NO_SHOW // User was confirmed but did not attend
}

model Event {
  id              String    @id @default(cuid())
  name            String
  description     String?
  date            DateTime // Start date and time
  endDate         DateTime? // Optional end date and time
  location        String? // e.g., "123 Main St", "Online"
  locationDetails String? // e.g., "Room 5", "Zoom Link: ..."

  organizerId String?
  organizer   User?   @relation("AdminCreatedEvents", fields: [organizerId], references: [id], onDelete: SetNull)

  organizationId String? // Temporarily optional
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  capacity             Int? // Max attendees, null for unlimited
  registrationDeadline DateTime? // When registration closes

  status    EventStatus @default(DRAFT)
  isPrivate Boolean     @default(false)
  // coverImage           String?   // URL for event image (legacy field) // Keep commented if using relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  registrations EventRegistration[]

  // Relation to Event Cover Image (one-to-one)
  coverImage   Image?  @relation("EventCoverImageRelation") // Renamed relation for clarity
  eventImageId String? @unique // Foreign key for the cover image (if used directly like this)
  // This field on Event implies Image.eventCoverFor is the other side.

  // If an event can have multiple images (gallery)
  // eventGalleryImages   Image[]   @relation("EventGalleryImagesRelation")

  @@index([organizationId])
  @@index([eventImageId]) // Index this if you query events by their cover image ID
}

model EventRegistration {
  id      String @id @default(cuid())
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Registrant info (for public/non-logged-in users)
  registrantName  String?
  registrantEmail String // Email is likely key for public registrations

  organizationId String // This should eventually be non-nullable. Assumes new registrations will have it.
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  registrationDate DateTime           @default(now())
  status           RegistrationStatus @default(CONFIRMED)
  notes            String?
  guestsCount      Int                @default(0)

  updatedAt DateTime @updatedAt

  // Ensures a person (by email) can only register once for an event
  @@unique([eventId, registrantEmail])
  @@index([registrantEmail])
  @@index([eventId])
  @@index([organizationId])
}

// Image storage model
model Image {
  id  String  @id @default(cuid())
  url String // Now required
  alt String?

  // Binary storage fields
  data     Bytes // Binary image data
  mimeType String // Content type (e.g., image/jpeg)
  size     Int // File size in bytes

  // Add these fields
  filename String? // Original filename
  width    Int? // Image width in pixels
  height   Int? // Image height in pixels

  // Who uploaded this image (Admin)
  uploaderId String?
  uploader   User?   @relation("AdminUploadedImagesForProfile", fields: [uploaderId], references: [id], onDelete: SetNull)

  // Add relation for user profile image
  userProfileFor User? @relation("UserProfileImage")

  // For which organization
  organizationId String? // Temporarily optional
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // This image is THE cover image FOR this event (one-to-one with Event.coverImage)
  eventCoverFor   Event?  @relation("EventCoverImageRelation", fields: [eventCoverForId], references: [id], onDelete: SetNull)
  eventCoverForId String? @unique // This foreign key on Image makes it a cover for one Event

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([uploaderId])
  @@index([eventCoverForId])
}
